// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// MarkovitzRRRCpp
Rcpp::List MarkovitzRRRCpp(const arma::mat& R, const double lambda, const char penalty_type, const char step_size_type, const double step_size_constant, const unsigned int max_iter);
RcppExport SEXP _markovitzRRR_MarkovitzRRRCpp(SEXP RSEXP, SEXP lambdaSEXP, SEXP penalty_typeSEXP, SEXP step_size_typeSEXP, SEXP step_size_constantSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const char >::type penalty_type(penalty_typeSEXP);
    Rcpp::traits::input_parameter< const char >::type step_size_type(step_size_typeSEXP);
    Rcpp::traits::input_parameter< const double >::type step_size_constant(step_size_constantSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(MarkovitzRRRCpp(R, lambda, penalty_type, step_size_type, step_size_constant, max_iter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_markovitzRRR_MarkovitzRRRCpp", (DL_FUNC) &_markovitzRRR_MarkovitzRRRCpp, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_markovitzRRR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
